{"version":3,"sources":["lib/components/carousel.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Carousel","props","onPrev","idx","state","index","setState","list","length","onNext","width","processList","Array","isArray","newList","unshift","push","className","style","this","onClick","transform","map","ele","minWidth","key","Component","App","list1","src","list2","i","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uTAyFeA,G,wDA1Eb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAqBRC,OAAS,WACP,IAAIC,EAAM,EAAKC,MAAMC,MAAQ,EACjB,IAARF,EACF,EAAKG,SAAS,CAAED,MAAO,EAAKD,MAAMG,KAAKC,OAAS,IAEhD,EAAKF,SAAS,CAAED,MAAOF,KA3BR,EAkCnBM,OAAS,WACP,IAAIN,GAAO,EAAKC,MAAMC,MAAQ,IAAM,EAAKD,MAAMG,KAAKC,OAAS,GACjD,IAARL,EACF,EAAKG,SAAS,CAAED,MAAO,IAEvB,EAAKC,SAAS,CAAED,MAAOF,KArCzB,EAAKC,MAAQ,CACXC,MAAO,EACPG,OAAQ,EAAKP,MAAMM,KAAKC,OACxBE,MAAO,EAAKT,MAAMS,OAAS,IAC3BH,KAAM,EAAKI,YAAY,EAAKV,MAAMM,OANnB,E,wDAUPA,GACV,GAAIK,MAAMC,QAAQN,GAAO,CACvB,IAAIO,EAAO,YAAOP,GAGlB,OAFAO,EAAQC,QAAQR,EAAKA,EAAKC,OAAS,IACnCM,EAAQE,KAAKT,EAAK,IACXO,K,+BA4BD,IAAD,OACP,OACE,oCAEE,yBACEG,UAAU,WACVC,MAAO,CAAER,MAAM,GAAD,OAAwB,EAAnBS,KAAKf,MAAMM,MAAhB,QAEd,yBAAKO,UAAU,mBAAmBG,QAASD,KAAKjB,SAChD,yBAAKe,UAAU,kBACb,yBACEA,UAAU,SACVC,MAAO,CACLG,UAAU,eAAD,OAAmBF,KAAKf,MAAMC,MAAQc,KAAKf,MAAMM,MAA2B,IAAjBS,KAAKf,MAAMM,MAAtE,SAGVS,KAAKf,MAAMG,KAAKe,KAAI,SAACC,EAAKpB,GAAN,OACnB,yBAAKc,UAAS,QAAWC,MAAO,CAACR,MAAO,EAAKN,MAAMM,MAAM,KAAMc,SAAU,EAAKpB,MAAMM,MAAM,MAAOe,IAAKtB,GACnGoB,QAMT,yBAAKN,UAAU,oBAAoBG,QAASD,KAAKV,e,GApEpCiB,cCuDRC,MAjEf,WAqDE,IApDA,IAAMC,EAAQ,CACZ,yBACEC,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,YAEZ,yBACEY,IAAI,mDACJZ,UAAU,aAIRa,EAAQ,GACLC,EAAI,EAAGA,EAAI,GAAIA,IACtBD,EAAMd,KAAK,yBAAKC,UAAU,SAAQ,0BAAMA,UAAU,cAAcc,KAGlE,OACE,yBAAKd,UAAU,OACb,kBAAC,EAAD,CAAUV,KAAMqB,EAAOlB,MAAO,MAC9B,kBAAC,EAAD,CAAUH,KAAMuB,EAAOpB,MAAO,QCpDhBsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDiIpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.19309e72.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport \"./carousel.scss\";\n\ninterface Props {\n  list: JSX.Element[];\n  width?: number;\n}\n\ninterface State {\n  index: number;\n  length: number;\n  width: number;\n  list: JSX.Element[];\n}\nclass Carousel extends Component<Props, State> {\n  constructor(props) {\n    super(props);\n    this.state = {\n      index: 1,\n      length: this.props.list.length,\n      width: this.props.width || 200,\n      list: this.processList(this.props.list)\n    };\n  }\n\n  processList(list: JSX.Element[]) {\n    if (Array.isArray(list)) {\n      let newList = [...list];\n      newList.unshift(list[list.length - 1]);\n      newList.push(list[0]);\n      return newList;\n    }\n  }\n\n  /**\n   * Handling for prev action\n   */\n  onPrev = () => {\n    let idx = this.state.index - 1;\n    if (idx === 0) {\n      this.setState({ index: this.state.list.length - 2 });\n    } else {\n      this.setState({ index: idx });\n    }\n  };\n\n  /**\n   * Handling for next action\n   */\n  onNext = () => {\n    let idx = (this.state.index + 1) % (this.state.list.length - 1);\n    if (idx === 0) {\n      this.setState({ index: 1 });\n    } else {\n      this.setState({ index: idx });\n    }\n  };\n\n  render() {\n    return (\n      <>\n        {/* index {this.state.index} */}\n        <div\n          className=\"carousel\"\n          style={{ width: `${this.state.width * 3}px` }}\n        >\n          <div className=\"arrow arrow-left\" onClick={this.onPrev}></div>\n          <div className=\"slider-wrapper\">\n            <div\n              className=\"slides\"\n              style={{\n                transform: `translateX(-${((this.state.index * this.state.width) - (this.state.width*.75) ) }px)`\n              }}\n            >\n              {this.state.list.map((ele, idx) => (\n                <div className={`slide`} style={{width: this.state.width+'px', minWidth: this.state.width+'px'}} key={idx}>\n                  {ele}\n                </div>\n              ))}\n            </div>\n          </div>\n\n          <div className=\"arrow arrow-right\" onClick={this.onNext}></div>\n        </div>\n      </>\n    );\n  }\n}\n\nexport default Carousel;\n","import React from \"react\";\nimport \"./App.scss\";\nimport Carousel from \"./lib/components/carousel\";\n\nfunction App() {\n  const list1 = [\n    <img\n      src=\"assets/images/photo-1544194215-541c2d3561a4.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1544210163-257effe9399e.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1546430783-fe4b9c159e52.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1548438294-1ad5d5f4f063.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1553374402-559e8b431161.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1554290712-e640351074bd.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1544194215-541c2d3561a4.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1544210163-257effe9399e.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1546430783-fe4b9c159e52.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1548438294-1ad5d5f4f063.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1553374402-559e8b431161.jpeg\"\n      className=\"image-c\"\n    ></img>,\n    <img\n      src=\"assets/images/photo-1554290712-e640351074bd.jpeg\"\n      className=\"image-c\"\n    ></img>\n  ];\n\n  const list2 = [];\n  for (let i = 0; i < 30; i++) {\n    list2.push(<div className=\"block\"><span className=\"block-area\">{i}</span></div>);\n  }\n\n  return (\n    <div className=\"App\">\n      <Carousel list={list1} width={300}></Carousel>\n      <Carousel list={list2} width={200}></Carousel>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}